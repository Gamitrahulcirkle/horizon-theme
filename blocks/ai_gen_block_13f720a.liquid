{% doc %}
  @prompt
    Bundle add to cart functionality

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-bundle-{{ ai_gen_id }} {
    padding: 30px;
    border-radius: {{ block.settings.border_radius }}px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-bundle-header-{{ ai_gen_id }} {
    margin-bottom: 20px;
    text-align: {{ block.settings.text_alignment }};
  }

  .ai-bundle-title-{{ ai_gen_id }} {
    margin: 0 0 10px 0;
    color: {{ block.settings.title_color }};
    font-size: {{ block.settings.title_size }}px;
  }

  .ai-bundle-description-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    margin: 0;
  }

  .ai-bundle-products-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 25px;
  }

  .ai-bundle-product-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    border: 1px solid {{ block.settings.product_border_color }};
    border-radius: 8px;
    overflow: hidden;
    background-color: #ffffff;
  }

  .ai-bundle-product-image-wrapper-{{ ai_gen_id }} {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
  }

  .ai-bundle-product-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-bundle-product-image-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
  }

  .ai-bundle-product-image-placeholder-{{ ai_gen_id }} svg {
    width: 80%;
    height: 80%;
  }

  .ai-bundle-product-info-{{ ai_gen_id }} {
    padding: 15px;
  }

  .ai-bundle-product-title-{{ ai_gen_id }} {
    margin: 0 0 5px 0;
    color: {{ block.settings.text_color }};
    font-size: 16px;
    font-weight: 500;
  }

  .ai-bundle-product-price-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
  }

  .ai-bundle-product-price-regular-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-weight: 600;
  }

  .ai-bundle-product-price-compare-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }}80;
    text-decoration: line-through;
    margin-right: 8px;
    font-size: 14px;
  }

  .ai-bundle-product-quantity-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    border: 1px solid {{ block.settings.product_border_color }};
    border-radius: 4px;
    width: fit-content;
  }

  .ai-bundle-quantity-button-{{ ai_gen_id }} {
    background: none;
    border: none;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: {{ block.settings.text_color }};
  }

  .ai-bundle-quantity-input-{{ ai_gen_id }} {
    width: 40px;
    text-align: center;
    border: none;
    -moz-appearance: textfield;
    padding: 0;
    font-size: 14px;
  }

  .ai-bundle-quantity-input-{{ ai_gen_id }}::-webkit-outer-spin-button,
  .ai-bundle-quantity-input-{{ ai_gen_id }}::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .ai-bundle-footer-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    align-items: {{ block.settings.text_alignment }};
    gap: 15px;
    margin-top: 20px;
  }

  .ai-bundle-total-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
  }

  .ai-bundle-savings-{{ ai_gen_id }} {
    font-size: 16px;
    color: {{ block.settings.savings_color }};
  }

  .ai-bundle-add-button-{{ ai_gen_id }} {
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    padding: 12px 25px;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
    min-width: 180px;
  }

  .ai-bundle-add-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-bundle-add-button-{{ ai_gen_id }}:disabled {
    background-color: {{ block.settings.button_color }}80;
    cursor: not-allowed;
  }

  .ai-bundle-error-{{ ai_gen_id }} {
    color: #d82c0d;
    margin-top: 10px;
    text-align: {{ block.settings.text_alignment }};
  }

  .ai-bundle-success-{{ ai_gen_id }} {
    color: #008060;
    margin-top: 10px;
    text-align: {{ block.settings.text_alignment }};
  }

  @media screen and (max-width: 749px) {
    .ai-bundle-products-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
    }

    .ai-bundle-footer-{{ ai_gen_id }} {
      align-items: center;
    }
  }
{% endstyle %}

<bundle-add-to-cart-{{ ai_gen_id }}
  class="ai-bundle-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-bundle-header-{{ ai_gen_id }}">
    {% if block.settings.title != blank %}
      <h2 class="ai-bundle-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
    {% endif %}
    {% if block.settings.description != blank %}
      <div class="ai-bundle-description-{{ ai_gen_id }}">{{ block.settings.description }}</div>
    {% endif %}
  </div>

  <div class="ai-bundle-products-{{ ai_gen_id }}">
    {% for i in (1..5) %}
      {% assign product_key = 'product_' | append: i %}
      {% assign product = block.settings[product_key] %}
      {% assign quantity_key = 'quantity_' | append: i %}
      {% assign quantity = block.settings[quantity_key] %}

      {% if product != blank %}
        <div class="ai-bundle-product-{{ ai_gen_id }}" data-product-id="{{ product.id }}" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
          <div class="ai-bundle-product-image-wrapper-{{ ai_gen_id }}">
            {% if product.featured_image != blank %}
              <img 
                src="{{ product.featured_image | image_url: width: 300 }}"
                alt="{{ product.featured_image.alt | escape }}"
                class="ai-bundle-product-image-{{ ai_gen_id }}"
                loading="lazy"
                width="300"
                height="300"
              >
            {% else %}
              <div class="ai-bundle-product-image-placeholder-{{ ai_gen_id }}">
                {{ 'product-apparel-1' | placeholder_svg_tag }}
              </div>
            {% endif %}
          </div>
          <div class="ai-bundle-product-info-{{ ai_gen_id }}">
            <h3 class="ai-bundle-product-title-{{ ai_gen_id }}">{{ product.title }}</h3>
            <div class="ai-bundle-product-price-{{ ai_gen_id }}">
              {% if product.compare_at_price > product.price %}
                <span class="ai-bundle-product-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
              {% endif %}
              <span class="ai-bundle-product-price-regular-{{ ai_gen_id }}" data-price="{{ product.selected_or_first_available_variant.price }}">
                {{ product.price | money }}
              </span>
            </div>
            <div class="ai-bundle-product-quantity-{{ ai_gen_id }}">
              <button 
                type="button" 
                class="ai-bundle-quantity-button-{{ ai_gen_id }} ai-bundle-quantity-decrease-{{ ai_gen_id }}"
                aria-label="Decrease quantity"
              >
                -
              </button>
              <input 
                type="number" 
                class="ai-bundle-quantity-input-{{ ai_gen_id }}" 
                value="{{ quantity }}" 
                min="0" 
                max="99"
                aria-label="Product quantity"
              >
              <button 
                type="button" 
                class="ai-bundle-quantity-button-{{ ai_gen_id }} ai-bundle-quantity-increase-{{ ai_gen_id }}"
                aria-label="Increase quantity"
              >
                +
              </button>
            </div>
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <div class="ai-bundle-footer-{{ ai_gen_id }}">
    {% if block.settings.show_total %}
      <div class="ai-bundle-total-{{ ai_gen_id }}">
        Total: <span class="ai-bundle-total-price-{{ ai_gen_id }}">{{ 0 | money }}</span>
      </div>
    {% endif %}

    {% if block.settings.show_savings and block.settings.discount_percentage > 0 %}
      <div class="ai-bundle-savings-{{ ai_gen_id }}">
        Save {{ block.settings.discount_percentage }}% when you buy this bundle!
      </div>
    {% endif %}

    <button type="button" class="ai-bundle-add-button-{{ ai_gen_id }}">
      {{ block.settings.button_text }}
    </button>

    <div class="ai-bundle-error-{{ ai_gen_id }}" style="display: none;"></div>
    <div class="ai-bundle-success-{{ ai_gen_id }}" style="display: none;"></div>
  </div>
</bundle-add-to-cart-{{ ai_gen_id }}>

<script>
  (function() {
    class BundleAddToCart{{ai_gen_id}} extends HTMLElement {
      constructor() {
        super();
        this.bundleItems = [];
        this.discountPercentage = {{ block.settings.discount_percentage | default: 0 }};
        this.addButton = this.querySelector('.ai-bundle-add-button-{{ ai_gen_id }}');
        this.totalPriceElement = this.querySelector('.ai-bundle-total-price-{{ ai_gen_id }}');
        this.errorElement = this.querySelector('.ai-bundle-error-{{ ai_gen_id }}');
        this.successElement = this.querySelector('.ai-bundle-success-{{ ai_gen_id }}');
        this.isAddingToCart = false;
      }

      connectedCallback() {
        this.initializeBundleItems();
        this.setupEventListeners();
        this.updateTotalPrice();
      }

      initializeBundleItems() {
        const productElements = this.querySelectorAll('.ai-bundle-product-{{ ai_gen_id }}');
        
        productElements.forEach(element => {
          const productId = element.dataset.productId;
          const variantId = element.dataset.variantId;
          const quantityInput = element.querySelector('.ai-bundle-quantity-input-{{ ai_gen_id }}');
          const priceElement = element.querySelector('.ai-bundle-product-price-regular-{{ ai_gen_id }}');
          
          if (productId && variantId && quantityInput && priceElement) {
            const price = parseInt(priceElement.dataset.price);
            
            this.bundleItems.push({
              productId,
              variantId,
              quantityInput,
              price,
              quantity: parseInt(quantityInput.value)
            });
          }
        });
      }

      setupEventListeners() {
        // Setup quantity controls
        const decreaseButtons = this.querySelectorAll('.ai-bundle-quantity-decrease-{{ ai_gen_id }}');
        const increaseButtons = this.querySelectorAll('.ai-bundle-quantity-increase-{{ ai_gen_id }}');
        const quantityInputs = this.querySelectorAll('.ai-bundle-quantity-input-{{ ai_gen_id }}');

        decreaseButtons.forEach((button, index) => {
          button.addEventListener('click', () => this.changeQuantity(index, -1));
        });

        increaseButtons.forEach((button, index) => {
          button.addEventListener('click', () => this.changeQuantity(index, 1));
        });

        quantityInputs.forEach((input, index) => {
          input.addEventListener('change', () => {
            const newValue = parseInt(input.value);
            if (isNaN(newValue) || newValue < 0) {
              input.value = 0;
            }
            this.bundleItems[index].quantity = parseInt(input.value);
            this.updateTotalPrice();
          });
        });

        // Setup add to cart button
        this.addButton.addEventListener('click', () => this.addBundleToCart());
      }

      changeQuantity(index, change) {
        if (index < this.bundleItems.length) {
          const item = this.bundleItems[index];
          const newQuantity = Math.max(0, item.quantity + change);
          
          item.quantity = newQuantity;
          item.quantityInput.value = newQuantity;
          
          this.updateTotalPrice();
        }
      }

      updateTotalPrice() {
        let totalPrice = 0;
        let hasItems = false;

        this.bundleItems.forEach(item => {
          if (item.quantity > 0) {
            totalPrice += item.price * item.quantity;
            hasItems = true;
          }
        });

        // Apply discount if configured
        if (this.discountPercentage > 0) {
          totalPrice = totalPrice * (1 - this.discountPercentage / 100);
        }

        if (this.totalPriceElement) {
          this.totalPriceElement.textContent = this.formatMoney(totalPrice);
        }

        // Disable add button if no items selected
        if (this.addButton) {
          this.addButton.disabled = !hasItems;
        }
      }

      formatMoney(cents) {
        const formatter = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ shop.currency }}',
          minimumFractionDigits: 2
        });
        
        return formatter.format(cents / 100);
      }

      async addBundleToCart() {
        if (this.isAddingToCart) return;
        
        const items = this.bundleItems
          .filter(item => item.quantity > 0)
          .map(item => ({
            id: item.variantId,
            quantity: item.quantity
          }));
          
        if (items.length === 0) return;
        
        this.isAddingToCart = true;
        this.addButton.disabled = true;
        this.errorElement.style.display = 'none';
        this.successElement.style.display = 'none';
        
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ items })
          });
          
          if (response.ok) {
            this.successElement.textContent = '{{ block.settings.success_message }}';
            this.successElement.style.display = 'block';
            
            // Update cart drawer/page if needed
            if (window.Shopify && window.Shopify.updateCartAttributes) {
              window.Shopify.updateCartAttributes({});
            } else {
              window.location.href = '{{ routes.cart_url }}';
            }
          } else {
            const errorData = await response.json();
            this.errorElement.textContent = errorData.description || '{{ block.settings.error_message }}';
            this.errorElement.style.display = 'block';
          }
        } catch (error) {
          this.errorElement.textContent = '{{ block.settings.error_message }}';
          this.errorElement.style.display = 'block';
        } finally {
          this.isAddingToCart = false;
          this.addButton.disabled = false;
        }
      }
    }

    customElements.define('bundle-add-to-cart-{{ ai_gen_id }}', BundleAddToCart{{ai_gen_id}});
  })();
</script>

{% schema %}
{
  "name": "Bundle Add to Cart",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Bundle Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Complete the Look"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Add these items to your cart together and save!</p>"
    },
    {
      "type": "header",
      "content": "Products"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Product 1"
    },
    {
      "type": "range",
      "id": "quantity_1",
      "label": "Default quantity",
      "min": 0,
      "max": 10,
      "step": 1,
      "default": 1
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product 2"
    },
    {
      "type": "range",
      "id": "quantity_2",
      "label": "Default quantity",
      "min": 0,
      "max": 10,
      "step": 1,
      "default": 1
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product 3"
    },
    {
      "type": "range",
      "id": "quantity_3",
      "label": "Default quantity",
      "min": 0,
      "max": 10,
      "step": 1,
      "default": 0
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product 4"
    },
    {
      "type": "range",
      "id": "quantity_4",
      "label": "Default quantity",
      "min": 0,
      "max": 10,
      "step": 1,
      "default": 0
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product 5"
    },
    {
      "type": "range",
      "id": "quantity_5",
      "label": "Default quantity",
      "min": 0,
      "max": 10,
      "step": 1,
      "default": 0
    },
    {
      "type": "header",
      "content": "Pricing"
    },
    {
      "type": "checkbox",
      "id": "show_total",
      "label": "Show total price",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_savings",
      "label": "Show savings message",
      "default": true
    },
    {
      "type": "range",
      "id": "discount_percentage",
      "label": "Discount percentage",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 10,
      "info": "This is for display purposes. Configure actual discounts in Shopify admin."
    },
    {
      "type": "header",
      "content": "Button"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Add Bundle to Cart"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success message",
      "default": "Bundle added to cart!"
    },
    {
      "type": "text",
      "id": "error_message",
      "label": "Error message",
      "default": "Could not add items to cart. Please try again."
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f9f9f9"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "product_border_color",
      "label": "Product border color",
      "default": "#e6e6e6"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "savings_color",
      "label": "Savings text color",
      "default": "#008060"
    },
    {
      "type": "range",
      "id": "title_size",
      "label": "Title size",
      "min": 16,
      "max": 36,
      "step": 1,
      "unit": "px",
      "default": 24
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Border radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "default": 8
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "label": "Button border radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Bundle Add to Cart"
    }
  ]
}
{% endschema %}